{"BehaviorExtension":{"scripts":[{"name":"rotatez","id":"075ebec0-d9e6-4645-92ab-c5d7e0febc30","code":"import { Scene, Color4, Mesh } from 'babylonjs';\r\n\r\nexport default class Play implements IScript {\r\n    // Public members\r\n    public blackColor = new Color4(0, 0, 0, 1);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor (public mesh: Mesh, public scene: Scene) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    public start (): void {\r\n        // You can access the scene everywhere\r\n        this.scene.clearColor = this.blackColor;\r\n\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    }\r\n\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    public update (deltaTimeMs: number): void {\r\n        // Your code...\r\n        mesh.rotation.z += 0.02;\r\n    }\r\n\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    public dispose (): void {\r\n        // Called once the attached object has been disposed\r\n    }\r\n}\r\n\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Play);","compiledCode":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar babylonjs_1 = require(\"babylonjs\");\r\nvar Play = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Play(mesh, scene) {\r\n        this.mesh = mesh;\r\n        this.scene = scene;\r\n        // Public members\r\n        this.blackColor = new babylonjs_1.Color4(0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    Play.prototype.start = function () {\r\n        // You can access the scene everywhere\r\n        this.scene.clearColor = this.blackColor;\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    };\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    Play.prototype.update = function (deltaTimeMs) {\r\n        // Your code...\r\n        mesh.rotation.z += 0.02;\r\n    };\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    Play.prototype.dispose = function () {\r\n        // Called once the attached object has been disposed\r\n    };\r\n    return Play;\r\n}());\r\nexports.default = Play;\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Play);\r\n"},{"name":"play","id":"26114eaa-5a0e-428b-98e7-f2bfe8bd5f20","code":"import { Scene, Color4, Mesh } from 'babylonjs';\r\n\r\nexport default class Play implements IScript {\r\n    // Public members\r\n    public blackColor = new Color4(0, 0, 0, 1);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor (public mesh: Mesh, public scene: Scene) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    public start (): void {\r\n        // You can access the scene everywhere\r\n        this.scene.clearColor = this.blackColor;\r\n\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    }\r\n\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    public update (deltaTimeMs: number): void {\r\n        // Your code...\r\n    \r\n    }\r\n\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    public dispose (): void {\r\n        // Called once the attached object has been disposed\r\n    }\r\n}\r\n\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Play);","compiledCode":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar babylonjs_1 = require(\"babylonjs\");\r\nvar Play = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Play(mesh, scene) {\r\n        this.mesh = mesh;\r\n        this.scene = scene;\r\n        // Public members\r\n        this.blackColor = new babylonjs_1.Color4(0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    Play.prototype.start = function () {\r\n        // You can access the scene everywhere\r\n        this.scene.clearColor = this.blackColor;\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    };\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    Play.prototype.update = function (deltaTimeMs) {\r\n        // Your code...\r\n    };\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    Play.prototype.dispose = function () {\r\n        // Called once the attached object has been disposed\r\n    };\r\n    return Play;\r\n}());\r\nexports.default = Play;\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Play);\r\n"},{"name":"rotatey","id":"3d7b6efc-18d5-426d-b454-2d0d234c8be4","code":"import { Scene, Color4, Mesh } from 'babylonjs';\r\n\r\nexport default class Rotatey implements IScript {\r\n    // Public members\r\n    public blackColor = new Color4(0, 0, 0, 1);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor (public mesh: Mesh, public scene: Scene) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    public start (): void {\r\n        // You can access the scene everywhere\r\n        this.scene.clearColor = this.blackColor;\r\n\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    }\r\n\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    public update (deltaTimeMs: number): void {\r\n        // Your code...\r\n        mesh.rotation.y += 0.05;\r\n    }\r\n\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    public dispose (): void {\r\n        // Called once the attached object has been disposed\r\n    }\r\n}\r\n\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Rotatey);","compiledCode":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar babylonjs_1 = require(\"babylonjs\");\r\nvar Rotatey = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Rotatey(mesh, scene) {\r\n        this.mesh = mesh;\r\n        this.scene = scene;\r\n        // Public members\r\n        this.blackColor = new babylonjs_1.Color4(0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    Rotatey.prototype.start = function () {\r\n        // You can access the scene everywhere\r\n        this.scene.clearColor = this.blackColor;\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    };\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    Rotatey.prototype.update = function (deltaTimeMs) {\r\n        // Your code...\r\n        mesh.rotation.y += 0.05;\r\n    };\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    Rotatey.prototype.dispose = function () {\r\n        // Called once the attached object has been disposed\r\n    };\r\n    return Rotatey;\r\n}());\r\nexports.default = Rotatey;\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Rotatey);\r\n"},{"name":"position","id":"3a21296e-370e-4c3b-9a8f-587397dee392","code":"import { Scene, Color4, Mesh } from 'babylonjs';\r\n\r\nexport default class Position implements IScript {\r\n    // Public members\r\n    public blackColor = new Color4(0, 0, 0, 1);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor (public mesh: Mesh, public scene: Scene) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    public start (): void {\r\n        // You can access the scene everywhere\r\n        this.scene.clearColor = this.blackColor;\r\n\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    }\r\n\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    public update (deltaTimeMs: number): void {\r\n        // Your code...\r\n        if (mesh.position.z > 18)\r\n            mesh.position.z -= 0.07;\r\n        else if (mesh.position.z < 18 && mesh.position.x < -1)\r\n            mesh.position.x += 0.07;\r\n        else {\r\n            mesh.position.z = 50;\r\n            mesh.position.x = -9.48;}\r\n    }\r\n\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    public dispose (): void {\r\n        // Called once the attached object has been disposed\r\n    }\r\n}\r\n\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Position);","compiledCode":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar babylonjs_1 = require(\"babylonjs\");\r\nvar Position = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Position(mesh, scene) {\r\n        this.mesh = mesh;\r\n        this.scene = scene;\r\n        // Public members\r\n        this.blackColor = new babylonjs_1.Color4(0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    Position.prototype.start = function () {\r\n        // You can access the scene everywhere\r\n        this.scene.clearColor = this.blackColor;\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    };\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    Position.prototype.update = function (deltaTimeMs) {\r\n        // Your code...\r\n        if (mesh.position.z > 18)\r\n            mesh.position.z -= 0.07;\r\n        else if (mesh.position.z < 18 && mesh.position.x < -1)\r\n            mesh.position.x += 0.07;\r\n        else {\r\n            mesh.position.z = 50;\r\n            mesh.position.x = -9.48;\r\n        }\r\n    };\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    Position.prototype.dispose = function () {\r\n        // Called once the attached object has been disposed\r\n    };\r\n    return Position;\r\n}());\r\nexports.default = Position;\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Position);\r\n"},{"name":"receiveshadows","id":"ddd9b041-1aee-4401-9343-72475e37321f","code":"import { Scene, Color4, Mesh } from 'babylonjs';\r\n\r\nexport default class Receiveshadows implements IScript {\r\n    // Public members\r\n    public blackColor = new Color4(0, 0, 0, 1);\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor (public mesh: Mesh, public scene: Scene) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    public start (): void {\r\n        // You can access the scene everywhere\r\n        this.scene.clearColor = this.blackColor;\r\n        mesh.receiveShadows = true;\r\n\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    }\r\n\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    public update (deltaTimeMs: number): void {\r\n        // Your code...\r\n    }\r\n\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    public dispose (): void {\r\n        // Called once the attached object has been disposed\r\n    }\r\n}\r\n\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Receiveshadows);","compiledCode":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar babylonjs_1 = require(\"babylonjs\");\r\nvar Receiveshadows = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Receiveshadows(mesh, scene) {\r\n        this.mesh = mesh;\r\n        this.scene = scene;\r\n        // Public members\r\n        this.blackColor = new babylonjs_1.Color4(0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    Receiveshadows.prototype.start = function () {\r\n        // You can access the scene everywhere\r\n        this.scene.clearColor = this.blackColor;\r\n        mesh.receiveShadows = true;\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    };\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    Receiveshadows.prototype.update = function (deltaTimeMs) {\r\n        // Your code...\r\n    };\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    Receiveshadows.prototype.dispose = function () {\r\n        // Called once the attached object has been disposed\r\n    };\r\n    return Receiveshadows;\r\n}());\r\nexports.default = Receiveshadows;\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Receiveshadows);\r\n"}],"nodes":[{"node":"arw_1","nodeId":"arw_1","metadatas":[{"active":true,"codeId":"3d7b6efc-18d5-426d-b454-2d0d234c8be4"}]},{"node":"arw_2","nodeId":"arw_2","metadatas":[{"active":true,"codeId":"3d7b6efc-18d5-426d-b454-2d0d234c8be4"}]},{"node":"obj_floor_1","nodeId":"obj_floor_1","metadatas":[{"active":true,"codeId":"ddd9b041-1aee-4401-9343-72475e37321f"}]},{"node":"obj_fullcube_an_2","nodeId":"obj_fullcube_an_2","metadatas":[{"active":true,"codeId":"3a21296e-370e-4c3b-9a8f-587397dee392"}]},{"node":"obj_fullcube_an_5","nodeId":"obj_fullcube_an_1","metadatas":[{"active":false,"codeId":"075ebec0-d9e6-4645-92ab-c5d7e0febc30"},{"active":true,"codeId":"26114eaa-5a0e-428b-98e7-f2bfe8bd5f20"}]},{"node":"obj_portal_1","nodeId":"obj_portal_1","metadatas":[{"active":true,"codeId":"075ebec0-d9e6-4645-92ab-c5d7e0febc30"}]},{"node":"obj_portal_3","nodeId":"obj_portal_3","metadatas":[{"active":true,"codeId":"075ebec0-d9e6-4645-92ab-c5d7e0febc30"}]},{"node":"obj_roof_1","nodeId":"obj_roof_1","metadatas":[{"active":true,"codeId":"ddd9b041-1aee-4401-9343-72475e37321f"}]},{"node":"obj_smallcube_43","nodeId":"obj_smallcube_43","metadatas":[{"active":true,"codeId":"3a21296e-370e-4c3b-9a8f-587397dee392"}]},{"node":"obj_smallcube_44","nodeId":"obj_smallcube_44","metadatas":[{"active":true,"codeId":"3a21296e-370e-4c3b-9a8f-587397dee392"}]},{"node":"obj_smallcube_45","nodeId":"obj_smallcube_45","metadatas":[{"active":true,"codeId":"3a21296e-370e-4c3b-9a8f-587397dee392"}]},{"node":"obj_walls_1","nodeId":"obj_walls_1","metadatas":[{"active":true,"codeId":"ddd9b041-1aee-4401-9343-72475e37321f"}]},{"node":"obj_wall_2","nodeId":"obj_wall_2","metadatas":[{"active":true,"codeId":"ddd9b041-1aee-4401-9343-72475e37321f"}]},{"node":"Scene","nodeId":"Scene","metadatas":[]}]},"AssetsExtension":{"prefabs":[],"particles":[]}}